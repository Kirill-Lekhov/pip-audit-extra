from pip_audit_extra.vulnerability.cache.cache import Cache
from pip_audit_extra.vulnerability.cache.object_hook import JSONObjectHook
from pip_audit_extra.vulnerability.cache.encoder import JSONEncoder
from pip_audit_extra.vulnerability.cache.type import VulnerabilityData, Record
from pip_audit_extra.constant import CACHE_DIR
from test.factory import make_vulnerability_data

from datetime import timedelta, datetime, timezone
from typing import Optional
from unittest.mock import patch, Mock

import pytest


class NoInitCache(Cache):
	def __init__(self, lifetime: Optional[timedelta] = None) -> None:
		self._data = {}
		self._object_hook = JSONObjectHook()
		self.lifetime = lifetime or timedelta.min


class FakeFileDescriptor:
	def __enter__(self):
		return self

	def __exit__(self, *args):
		pass


class TestCache:
	def test___init__(self):
		with patch.object(Cache, "clean") as clean_method:
			with patch.object(Cache, "load") as load_method:
				cache = Cache()

				assert cache._data == {}
				assert isinstance(cache._object_hook, JSONObjectHook)
				assert cache.lifetime == timedelta.min
				clean_method.assert_called_once()
				load_method.assert_called_once()

				cache = Cache(timedelta(seconds=30))
				assert cache.lifetime == timedelta(seconds=30)

	def test_load__exceptions(self):
		cache = NoInitCache()

		with pytest.warns(UserWarning, match="Cannot load cache from file: TEST"):
			with patch("pip_audit_extra.vulnerability.cache.cache.exists") as exists_func:
				exists_func.side_effect = Exception("TEST")
				cache.load()

	def test_load__normal(self):
		cache = NoInitCache()

		with patch("pip_audit_extra.vulnerability.cache.cache.exists") as exists_func:
			exists_func.return_value = True

			with patch("pip_audit_extra.vulnerability.cache.cache.open") as open_func:
				open_func.return_value = FakeFileDescriptor()

				with patch("pip_audit_extra.vulnerability.cache.cache.load") as load_func:
					load_func.return_value = {"text": "Hello World"}

					cache.load()
					assert cache._data == {"text": "Hello World"}
					exists_func.assert_called_once_with(cache.CACHE_FILE_PATH)
					open_func.assert_called_once_with(cache.CACHE_FILE_PATH, mode="r")
					load_func.assert_called_with(open_func.return_value, object_hook=cache._object_hook)

	def test_save__exceptions(self):
		cache = NoInitCache()

		with patch("pip_audit_extra.vulnerability.cache.cache.exists") as exists_func:
			exists_func.side_effect = Exception("TEST")

			with pytest.warns(UserWarning, match="Cannot save cache on disk"):
				cache.save()

	def test_save__normal(self):
		cache = NoInitCache()

		with patch("pip_audit_extra.vulnerability.cache.cache.exists") as exists_func:
			exists_func.return_value = False

			with patch("pip_audit_extra.vulnerability.cache.cache.makedirs") as makedirs_func:
				with patch("pip_audit_extra.vulnerability.cache.cache.open") as open_func:
					open_func.return_value = FakeFileDescriptor()

					with patch("pip_audit_extra.vulnerability.cache.cache.dump") as dump_func:
						cache.save()
						exists_func.assert_called_once_with(CACHE_DIR)
						makedirs_func.assert_called_once_with(CACHE_DIR, exist_ok=True)
						open_func.assert_called_once_with(cache.CACHE_FILE_PATH, mode="w")
						dump_func.assert_called_once_with(cache._data, open_func.return_value, cls=JSONEncoder)

	def test_add(self):
		cache = NoInitCache()

		with patch("pip_audit_extra.vulnerability.cache.cache.datetime") as datetime_cls:
			datetime_cls.now = Mock()
			datetime_cls.now.return_value = datetime(2024, 6, 12, 9, 10, 11, tzinfo=timezone.utc)
			vuln_data = make_vulnerability_data()
			cache.add(vuln_data)

			assert len(cache._data.keys()) == 1
			assert isinstance(cache._data[vuln_data.id], dict)
			assert cache._data[vuln_data.id]["updated_at"] == datetime(2024, 6, 12, 9, 10, 11, tzinfo=timezone.utc)
			assert isinstance(cache._data[vuln_data.id]["data"], VulnerabilityData)
			assert cache._data[vuln_data.id]["data"].id == vuln_data.id
			assert cache._data[vuln_data.id]["data"].fix_versions == vuln_data.fix_versions
			assert cache._data[vuln_data.id]["data"].severity == vuln_data.severity
			datetime_cls.now.assert_called_once_with(timezone.utc)

	def test_get(self):
		cache = NoInitCache()

		assert cache.get("TEST") is None

		vuln_data = make_vulnerability_data()
		cache._data[vuln_data.id] = Record(
			updated_at=datetime(2024, 6, 12, 9, 10, 11, tzinfo=timezone.utc),
			data=vuln_data,
		)

		with patch("pip_audit_extra.vulnerability.cache.cache.datetime") as datetime_cls:
			datetime_cls.now = Mock()
			datetime_cls.now.return_value = datetime(2024, 6, 13, 9, 10, 11, tzinfo=timezone.utc)
			assert cache.get(vuln_data.id) is None
			assert not cache._data

			cache.lifetime = timedelta(days=7)
			cache._data[vuln_data.id] = Record(
				updated_at=datetime(2024, 6, 12, 9, 10, 11, tzinfo=timezone.utc),
				data=vuln_data,
			)
			cached_data = cache.get(vuln_data.id)
			assert isinstance(cached_data, VulnerabilityData)
			assert cached_data.id == vuln_data.id
			assert cached_data.fix_versions == vuln_data.fix_versions
			assert cached_data.severity == vuln_data.severity

	def test_clean(self):
		cache = NoInitCache(timedelta(days=7))
		cache._data = {
			"ID.1": Record(updated_at=datetime(2024, 6, 1, 9, 10, 11, tzinfo=timezone.utc), data=make_vulnerability_data(vuln_id="ID.1")),
			"ID.2": Record(updated_at=datetime(2024, 6, 16, 9, 10, 11, tzinfo=timezone.utc), data=make_vulnerability_data(vuln_id="ID.2")),
			"ID.3": Record(updated_at=datetime(2024, 6, 30, 9, 10, 11, tzinfo=timezone.utc), data=make_vulnerability_data(vuln_id="ID.3")),
		}

		with patch("pip_audit_extra.vulnerability.cache.cache.datetime") as datetime_cls:
			datetime_cls.now = Mock()
			datetime_cls.now.return_value = datetime(2024, 6, 13, 9, 10, 11, tzinfo=timezone.utc)
			cache.clean()

			assert len(cache._data) == 2
			assert set(cache._data.keys()) == {"ID.2", "ID.3"}
