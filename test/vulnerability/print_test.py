from pip_audit_extra.vulnerability.print import print_vulnerabilities
from pip_audit_extra.vulnerability.sort import sort_vulnerabilities
from pip_audit_extra.severity import Severity, SEVERITY_COLOR
from test.factory import make_vulnerability

from unittest.mock import patch


class FakeTableColumn:
	def __init__(self, name: str, no_wrap: bool = False) -> None:
		self.name = name
		self.no_wrap = no_wrap


class FakeTable:
	def __init__(self) -> None:
		self.columns = []
		self.rows = []

	def add_column(self, name: str, no_wrap: bool = False):
		self.columns.append(FakeTableColumn(name, no_wrap))

	def add_row(self, *args):
		self.rows.append(args)


class FakeConsole:
	def __init__(self) -> None:
		self._last_printed_table = None

	def print(self, table: FakeTable):
		self._last_printed_table = table


class TestPrintVulnerabilities:
	def test_without_data(self):
		with patch("pip_audit_extra.vulnerability.print.Table", new=FakeTable):
			with patch("pip_audit_extra.vulnerability.print.sort_vulnerabilities") as sort_vulnerabilities_func:
				sort_vulnerabilities_func.side_effect = sort_vulnerabilities
				console = FakeConsole()

				print_vulnerabilities(console, [])		# type: ignore - for testing purposes
				sort_vulnerabilities_func.assert_called_once_with([])
				assert console._last_printed_table is not None
				assert console._last_printed_table.rows == []
				assert len(console._last_printed_table.columns) == 5
				assert console._last_printed_table.columns[0].name == "Id"
				assert console._last_printed_table.columns[0].no_wrap == True
				assert console._last_printed_table.columns[1].name == "Package name"
				assert console._last_printed_table.columns[1].no_wrap == False
				assert console._last_printed_table.columns[2].name == "Package version"
				assert console._last_printed_table.columns[2].no_wrap == False
				assert console._last_printed_table.columns[3].name == "Fix versions"
				assert console._last_printed_table.columns[3].no_wrap == False
				assert console._last_printed_table.columns[4].name == "Severity"
				assert console._last_printed_table.columns[4].no_wrap == False

	def test_with_data(self):
		vulnerabilities = [
			make_vulnerability("1", "PACKAGE.1", "PACKAGE_VERSION.1", [], Severity.CRITICAL),
			make_vulnerability("2", "PACKAGE.2", "PACKAGE_VERSION.2", ["FIX_VER.1", "FIX_VER.2"], Severity.HIGH),
			make_vulnerability("3", "PACKAGE.3", "PACKAGE_VERSION.3", [], Severity.MODERATE),
			make_vulnerability("4", "PACKAGE.4", "PACKAGE_VERSION.4", ["FIX_VER.3"], Severity.LOW),
			make_vulnerability("5", "PACKAGE.5", "PACKAGE_VERSION.5", ["FIX_VER.4"], None),
		]

		with patch("pip_audit_extra.vulnerability.print.Table", new=FakeTable):
			console = FakeConsole()

			print_vulnerabilities(console, vulnerabilities)		# type: ignore - for testing purposes
			assert console._last_printed_table is not None
			assert len(console._last_printed_table.rows) == 5
			assert console._last_printed_table.rows[0] == (
				"1",
				"PACKAGE.1",
				"PACKAGE_VERSION.1",
				"",
				f"[{SEVERITY_COLOR[Severity.CRITICAL]}]CRITICAL[/{SEVERITY_COLOR[Severity.CRITICAL]}]",
			)
			assert console._last_printed_table.rows[1] == (
				"2",
				"PACKAGE.2",
				"PACKAGE_VERSION.2",
				"FIX_VER.1, FIX_VER.2",
				f"[{SEVERITY_COLOR[Severity.HIGH]}]HIGH[/{SEVERITY_COLOR[Severity.HIGH]}]",
			)
			assert console._last_printed_table.rows[2] == (
				"3",
				"PACKAGE.3",
				"PACKAGE_VERSION.3",
				"",
				f"[{SEVERITY_COLOR[Severity.MODERATE]}]MODERATE[/{SEVERITY_COLOR[Severity.MODERATE]}]",
			)
			assert console._last_printed_table.rows[3] == (
				"4",
				"PACKAGE.4",
				"PACKAGE_VERSION.4",
				"FIX_VER.3",
				f"[{SEVERITY_COLOR[Severity.LOW]}]LOW[/{SEVERITY_COLOR[Severity.LOW]}]",
			)
			assert console._last_printed_table.rows[4] == (
				"5",
				"PACKAGE.5",
				"PACKAGE_VERSION.5",
				"FIX_VER.4",
				"",
			)
