from pip_audit_extra.vulnerability.filter.severity import SeverityChecker, SeverityExacChecker
from pip_audit_extra.severity import Severity
from test.factory import make_vulnerability

from unittest.mock import patch


class TestSeverityChecker:
	def test___init__(self):
		with patch("pip_audit_extra.vulnerability.filter.severity.SEVERITY_PRIORITY", new={Severity.CRITICAL: 0}):
			checker = SeverityChecker(Severity.CRITICAL)
			assert checker.value == 0

			checker = SeverityChecker(Severity.HIGH)
			assert checker.value == 1

		with patch("pip_audit_extra.vulnerability.filter.severity.SEVERITY_PRIORITY", new={}):
			checker = SeverityChecker(Severity.CRITICAL)
			assert checker.value == 0

			checker = SeverityChecker(Severity.HIGH)
			assert checker.value == 0

	def test_check(self):
		with patch(
			"pip_audit_extra.vulnerability.filter.severity.SEVERITY_PRIORITY",
			new={
				Severity.CRITICAL: 0,
				Severity.HIGH: 1,
				Severity.MODERATE: 2,
			},
		):
			checker = SeverityChecker(Severity.HIGH)
			assert not checker.check(make_vulnerability(severity=None))
			assert not checker.check(make_vulnerability(severity=Severity.LOW))
			assert not checker.check(make_vulnerability(severity=Severity.MODERATE))
			assert checker.check(make_vulnerability(severity=Severity.HIGH))
			assert checker.check(make_vulnerability(severity=Severity.CRITICAL))


class TestSeverityExacChecker:
	def test___init__(self):
		checker = SeverityExacChecker(Severity.CRITICAL)
		assert checker.value is Severity.CRITICAL

	def test_check(self):
		checker = SeverityExacChecker(Severity.CRITICAL)
		vulnerability = make_vulnerability(severity=Severity.CRITICAL)
		assert checker.check(vulnerability)

		vulnerability.severity = Severity.LOW
		assert not checker.check(vulnerability)

		vulnerability.severity = None
		assert not checker.check(vulnerability)
