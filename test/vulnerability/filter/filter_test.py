from pip_audit_extra.vulnerability.filter.filter import VulnerabilityFilter
from pip_audit_extra.vulnerability.filter.severity import SeverityFilterOption, SeverityChecker, SeverityExacChecker
from pip_audit_extra.severity import Severity
from test.factory import make_vulnerability

from unittest.mock import patch


class TestVulnerabilityFilter:
	def test___init__(self):
		vuln_filter = VulnerabilityFilter()
		assert vuln_filter.checkers == []

		with patch("pip_audit_extra.vulnerability.filter.severity.SEVERITY_PRIORITY", new={}):
			vuln_filter = VulnerabilityFilter(SeverityFilterOption(False, Severity.MODERATE))
			assert len(vuln_filter.checkers) == 1
			assert isinstance(vuln_filter.checkers[0], SeverityChecker)
			assert vuln_filter.checkers[0].value == 0

		vuln_filter = VulnerabilityFilter(SeverityFilterOption(True, Severity.MODERATE))
		assert len(vuln_filter.checkers) == 1
		assert isinstance(vuln_filter.checkers[0], SeverityExacChecker)
		assert vuln_filter.checkers[0].value is Severity.MODERATE

	def test_filter(self):
		vuln_filter = VulnerabilityFilter()
		vuln_filter.checkers = [
			SeverityChecker(Severity.HIGH),
			SeverityExacChecker(Severity.HIGH),
		]

		assert len(list(vuln_filter.filter([]))) == 0

		vulns = list(vuln_filter.filter([
			make_vulnerability(vuln_id="ID.1", severity=Severity.LOW),
			make_vulnerability(vuln_id="ID.2", severity=Severity.MODERATE),
			make_vulnerability(vuln_id="ID.3", severity=Severity.CRITICAL),
			make_vulnerability(vuln_id="ID.4", severity=Severity.HIGH),
		]))
		assert len(vulns) == 1
		assert vulns[0].id == "ID.4"
