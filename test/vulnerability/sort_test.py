from pip_audit_extra.vulnerability.sort import sort_vulnerabilities
from pip_audit_extra.vulnerability.dataclass import Vulnerability
from pip_audit_extra.severity import Severity
from test.factory import make_vulnerability

from typing import List
from unittest.mock import patch

import pytest


def cmp_vulns(v1: Vulnerability, v2: Vulnerability) -> bool:
	return (
		v1.id == v2.id and
		v1.package_name == v2.package_name and
		v1.package_version == v2.package_version and
		v1.fix_versions == v2.fix_versions and
		v1.severity == v2.severity
	)


def cmp_vulns_list(l1: List[Vulnerability], l2: List[Vulnerability]) -> bool:
	return (
		len(l1) == len(l2) and
		all(map(lambda x: cmp_vulns(*x), zip(l1, l2)))
	)


@pytest.mark.parametrize(
	"src, priorities, expected_result",
	[
		([], {}, []),
		(
			[
				make_vulnerability(package_name="B"),
				make_vulnerability(package_name="A"),
				make_vulnerability(package_name="C"),
			],
			{},
			[
				make_vulnerability(package_name="A"),
				make_vulnerability(package_name="B"),
				make_vulnerability(package_name="C"),
			],
		),
		(
			[
				make_vulnerability(package_name="D", severity=None),
				make_vulnerability(package_name="B", severity=Severity.LOW),
				make_vulnerability(package_name="A", severity=Severity.CRITICAL),
				make_vulnerability(package_name="C", severity=Severity.MODERATE),
			],
			{
				Severity.LOW: 10,
				Severity.CRITICAL: 0,
				Severity.MODERATE: 1,
			},
			[
				make_vulnerability(package_name="A", severity=Severity.CRITICAL),
				make_vulnerability(package_name="C", severity=Severity.MODERATE),
				make_vulnerability(package_name="B", severity=Severity.LOW),
				make_vulnerability(package_name="D", severity=None),
			],
		),
	],
)
def test_sort_vulnerabilities(src, priorities, expected_result):
	with patch("pip_audit_extra.vulnerability.sort.SEVERITY_PRIORITY", priorities):
		assert cmp_vulns_list(sort_vulnerabilities(src), expected_result)
